# 浅拷贝
class Array
{
public:
  Array(){m_iCount=5;}
  Array(const Array& arr)
  {m_iCount=arr.m_iCount;}
private:
int m_iCount;
};

int main(void)
{
  Array arr1;
  Array arr2=arr1;
  return 0;
}

# 深拷贝
class Array
{
public:
  Array(){m_iCount=5;m_pArr=new int[m_iCount];}
  Array(const Array& arr){
  m_iCount=arr.m_iCount;
  m_pArr=new int[m_iCount];
  for(int i=0;i<m_iCount;i++)
  {m_pArr[i]=arr.m_pArr[i];}
  }
private:
  int m_iCount;
  int *m_pArr;
};

int main(void)
{
  Array arr1;
  Array arr2=arr1;
  return 0;
}

# 对象指针
## 堆
Coordinate *p1=NULL;
p1=new Coordinate;
p1->m_iX=10;
Coordinate *p2=new Coordinate();
...（后续操作）
delete p1;
p1=NULL;
delete p2;
p2=NULL;

## 栈
Coordinate p1;
Coordinate *p2=&p1;
p2->m_iX=10;
cout<<p1.m_iX<<endl;
（p2操作了p1的数据成员）
