# 内存管理
## 释放内存注意事项
int *p = new int;
if (NULL == p)
{
//内存分配失败
//异常处理
}
delete p;
p = NULL;

int *p = new int[1000];
if (NULL == p)
{
//内存分配失败
//异常处理
}
delete []p;
p = NULL;

使用new申请内存，使用delete释放内存。
申请内存需要判断是否成功，释放内存需要设空指针。
new与delete配套使用。
C语言：
void *mallloc(size_t size);
void free(void *memblock);
比较：
C
in *p = (int *)malloc(sizeof(int));
C++
int *p = new int;
C
int *arr = (int*)calloc(5,sizeof(int));
C++
int *p = new int[5];

# 类与对象
class TV
{
public:
char name[20];
int type;

void changeVol();
void power();
}
从栈实例化对象
int main(void)
{
TV tv;
TV tv[20];

return 0;
}
从栈访问对象成员
int main(void)
{
TV tv;
tv.type = 0;
tv.changeVol();
return 0;
}

从堆实例化对象
int main(void)
{
TV *p = new TV();
TV *q = new TV[20];
delete p;
delete []q;
return 0;
}
从堆中访问对象成员
int main(void)
{
TV *p = new TV();
p->type = 0;
p->changeVol();
delete p;
p = NULL;
return 0;
}
若是数组
int main(void)
{
TV *p = new TV[5];
for (int i=0; i < 5; i++)
{
p[i]->type = 0;
p[i]->changeVol();
}
delete []p;
p = NULL;
return 0;
}

# string类型
## 初始化string对象的方式
string s1;//s为空串
string s2("ABC");//用字符串字面值初始化s2
string s3(s2);//将s3初始化为s2的一个副本
string s4(n, "c");//将s4初始化为字符‘c’的n个副本

## string的常用操作
s.empty() 若s为空串，则返回true，否则返回false
s.size() 返回s中字符的个数
S[n] 返回S中位置为n的字符，位置从0开始
s1+s2 将两个串连接成新串，返回新生成的串
s1=s2 把s1的内容替换为s2的副本
v1 == v2 判定相等，相等返回true，否则返回false
v1 != v2 判定不等，不等返回true，否则返回false
注意：string s = "hello" + "world"; 是错误的。
但是string s2("world");
string s = "hello" + s2;或
string s = "hello" + s2 + "world";是合法的。

# 类内定义和类外定义
## 类内定义
class Student
{
public:
void setAge(int_age)
{
  age = _age;
}
int getAge()
{
  return age;
}
void study()
{
  //To do
}
private:
  string name;
  int age;
};

## 类外定义
### 同文件类外定义
Car.cpp
class Car
{
  public:
  void run();
  void stop();
  void changeSpeed();
};
void Car::run(){}
void Car::stop(){}
void Car::changeSpeed(){}

### 分文件类外定义（最常用）
Car.h
class Car
{
public:
  void run();
  void stop();
  void changeSpeed();
};

Car.cpp
#include "Car.h"
void Car::run()
{}
void Car::stop()
{}
void Car::changeSpeed()
{}

# 对象结构
## 内存分区
栈区：int x = 0; int *p = NULL;（内存由系统分配，程序员不必关心分配和回收）
堆区：int *p = new int[20];（需要管理内存）
全局区：存储全局变量及静态变量
常量区：string str = "hello";
代码区：存储逻辑代码的二进制

## 构造函数
构造函数在对象实例化时被自动调用（1次）
构造函数与类同名
构造函数没有返回值
构造函数可以有多个重载形式
实例化对象时仅用到一个构造函数
当用户没有定义构造函数时，编译器自动生成一个构造函数

### 无参构造函数
class Student
{
public:
  Student(){m_strName = "jim";}
private:
string m_strName;
};

### 有参构造函数
class Student
{
public:
  Student(string name)
  {m_strName = name;}
private:
  string m_strName;
};

### 重载构造函数
class Student
{
public:
  Student(){m_strName = "jim";}
  Student(string name)
  {m_strName = name;}
private:
  string m_strName;
};

## 构造函数初始化列表
class Student
{
public:
  Student():m_strName("Jim"),m_iAge(10){}
private:
  string m_strName;
  int m_iAge;
};
特性：
初始化列表先于构造函数执行
初始化列表只能用于构造函数
初始化列表可以同时初始化多个数据成员
必要性：
class Circle
{
public:
  Circle(){m_dPi=3.14}  错误
private:
const double m_dPi;
};

class Circle
{
public:
  Circle():m_dPi(3.14){}  正确
private:
const double m_dPi;
};

## 拷贝构造函数
定义格式：类名（const 类名&变量名）
class Student
{
public:
  Student(){m_strName = "jim";}  //普通构造函数
  Student(const Student& stu){}  //拷贝构造函数
private:
string m_strName;
};

- 如果没有自定义的拷贝构造函数则系统自动生成一个默认的拷贝构造函数
- 当采用直接初始化或复制初始化实例化对象时系统自动调用拷贝构造函数

总结：构造函数分为无参构造函数和有参构造函数
无参构造函数-->默认构造函数
有参构造函数又分为参数带默认值（每个参数都带就是默认构造函数）和参数无默认值

系统自动生成的函数包括普通构造函数和拷贝构造函数

例：
Teacher t1;//调用普通构造函数
Teacher t2 = t1;//调用拷贝构造函数
Teacher t3(t1);//调用拷贝构造函数

拷贝构造函数的参数是确定的，不能重载。

## 析构函数
定义格式：~类名（）
class Student
{
public:
  Student(){cout<<"Student"<<endl;}
  ~Student(){cout<<"~Student"<<endl;}
private:
  string m_strName;
};

class Student
{
public:
  Student() {m_pName = new char[20];}
  ~Student(){delete []m_pName;}
private:
  char *m_pName;
};

如果没有自定义的析构函数则系统自动生成
析构函数在对象销毁时自动调用
析构函数没有返回值、没有参数也不能重载
