# 内存管理
## 释放内存注意事项
int *p = new int;
if (NULL == p)
{
//内存分配失败
//异常处理
}
delete p;
p = NULL;

int *p = new int[1000];
if (NULL == p)
{
//内存分配失败
//异常处理
}
delete []p;
p = NULL;

使用new申请内存，使用delete释放内存。
申请内存需要判断是否成功，释放内存需要设空指针。
new与delete配套使用。
C语言：
void *mallloc(size_t size);
void free(void *memblock);
比较：
C
in *p = (int *)malloc(sizeof(int));
C++
int *p = new int;
C
int *arr = (int*)calloc(5,sizeof(int));
C++
int *p = new int[5];

# 类与对象
class TV
{
public:
char name[20];
int type;

void changeVol();
void power();
}
从栈实例化对象
int main(void)
{
TV tv;
TV tv[20];

return 0;
}
从栈访问对象成员
int main(void)
{
TV tv;
tv.type = 0;
tv.changeVol();
return 0;
}

从堆实例化对象
int main(void)
{
TV *p = new TV();
TV *q = new TV[20];
delete p;
delete []q;
return 0;
}
从堆中访问对象成员
int main(void)
{
TV *p = new TV();
p->type = 0;
p->changeVol();
delete p;
p = NULL;
return 0;
}
若是数组
int main(void)
{
TV *p = new TV[5];
for (int i=0; i < 5; i++)
{
p[i]->type = 0;
p[i]->changeVol();
}
delete []p;
p = NULL;
return 0;
}

# string类型
## 初始化string对象的方式
string s1;//s为空串
string s2("ABC");//用字符串字面值初始化s2
string s3(s2);//将s3初始化为s2的一个副本
string s4(n, "c");//将s4初始化为字符‘c’的n个副本

## string的常用操作
s.empty() 若s为空串，则返回true，否则返回false
s.size() 返回s中字符的个数
S[n] 返回S中位置为n的字符，位置从0开始
s1+s2 将两个串连接成新串，返回新生成的串
s1=s2 把s1的内容替换为s2的副本
v1 == v2 判定相等，相等返回true，否则返回false
v1 != v2 判定不等，不等返回true，否则返回false
注意：string s = "hello" + "world"; 是错误的。
但是string s2("world");
string s = "hello" + s2;或
string s = "hello" + s2 + "world";是合法的。
